#ifndef mirv_core_ir_expression_ii
#define mirv_core_ir_expression_ii

#include <mirv/core/filter/visitor.hh>

#include <mirv/core/ir/arithmetic.hh>
#include <mirv/core/ir/logical.hh>
#include <mirv/core/ir/bitwise.hh>
#include <mirv/core/ir/reference.hh>
#include <mirv/core/util/cast.hh>

namespace mirv {
   template<typename Op>
   void Expression<Op>::accept(ExpressionVisitor &V)
   {
     ptr<Node<Base> >::type pn = this->shared_from_this();
     typename ptr<Expression<Op> >::type p = safe_cast<Expression<Op> >(pn);
     V.visit(p);
   }

   void InnerExpression::accept(ExpressionVisitor &V)
   {
     ptr<Node<Base> >::type pn = shared_from_this();
     ptr<InnerExpression>::type p = safe_cast<InnerExpression>(pn);
     V.visit(p);
   }

   void LeafExpression::accept(ExpressionVisitor &V)
   {
     ptr<Node<Base> >::type pn = shared_from_this();
     ptr<LeafExpression>::type p = safe_cast<LeafExpression>(pn);
     V.visit(p);
   }

  void Unary::interface::accept(ExpressionVisitor &V)
  {
     ptr<Node<Base> >::type pn = shared_from_this();
     ptr<Expression<Unary> >::type p = safe_cast<Expression<Unary> >(pn);
    V.visit(p);
  }

  void Binary::interface::accept(ExpressionVisitor &V)
  {
    ptr<Node<Base> >::type pn = shared_from_this();
    ptr<Expression<Binary> >::type p = safe_cast<Expression<Binary> >(pn);
    V.visit(p);
  }
}

#endif
